{"title":"移动端Web上传图片","slug":"移动端Web上传图片","date":"2016-04-06T10:04:42.000Z","updated":"2022-01-20T04:12:09.028Z","comments":true,"path":"api/articles/移动端Web上传图片.json","excerpt":"最近遇到了移动端图片上传以及上传前对图片的缩放，旋转，裁剪等功能的需求，查看了图片的裁剪和旋转的插件基本上适合PC端交互，只找到了一个 Cropper 还可以，看来有些交互要自己思考设计！","covers":null,"content":"<p>最近遇到了移动端图片上传以及上传前对图片的缩放，旋转，裁剪等功能的需求，查看了图片的裁剪和旋转的插件基本上适合PC端交互，只找到了一个 <a href=\"http://fengyuanchen.github.io/cropper/\">Cropper</a> 还可以，看来有些交互要自己思考设计！</p>\n<span id=\"more\"></span>\n<h3 id=\"2016-04-14-【文件格式的转换，Base64-amp-Blob-amp-File】\"><a href=\"#2016-04-14-【文件格式的转换，Base64-amp-Blob-amp-File】\" class=\"headerlink\" title=\"2016-04-14 【文件格式的转换，Base64 &amp; Blob &amp; File】\"></a>2016-04-14 【文件格式的转换，Base64 &amp; Blob &amp; File】</h3><ol>\n<li><a href=\"http://www.blogjava.net/jidebingfeng/articles/406171.html\">javascript将base64编码的图片数据转换为file并提交</a><blockquote>\n<p>测试chrome 浏览器，和iOS9.3 中可以（微信）【解决了canvas.toBlob()不支持问题】, 代码如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">convertBase64UrlToBlob: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">urlData, type</span>)</span>&#123;<br>    contentType = type || <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    <span class=\"hljs-keyword\">var</span> bytes=<span class=\"hljs-built_in\">window</span>.atob(urlData.split(<span class=\"hljs-string\">&#x27;,&#x27;</span>)[<span class=\"hljs-number\">1</span>]);        <span class=\"hljs-comment\">//去掉url的头，并转换为byte</span><br>    <span class=\"hljs-comment\">//处理异常,将ascii码小于0的转换为大于0</span><br>    <span class=\"hljs-keyword\">var</span> ab = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">ArrayBuffer</span>(bytes.length);<br>    <span class=\"hljs-keyword\">var</span> ia = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(ab);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; bytes.length; i++) &#123;<br>        ia[i] = bytes.charCodeAt(i);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Blob( [ab] , &#123;<span class=\"hljs-attr\">type</span> : contentType&#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><a href=\"http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\">Creating a Blob from a base64 string in JavaScript</a><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">b64toBlob</span>(<span class=\"hljs-params\">b64Data, contentType, sliceSize</span>) </span>&#123;<br>  contentType = contentType || <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  sliceSize = sliceSize || <span class=\"hljs-number\">512</span>;<br><br>  <span class=\"hljs-keyword\">var</span> byteCharacters = atob(b64Data);<br>  <span class=\"hljs-keyword\">var</span> byteArrays = [];<br><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> offset = <span class=\"hljs-number\">0</span>; offset &lt; byteCharacters.length; offset += sliceSize) &#123;<br>    <span class=\"hljs-keyword\">var</span> slice = byteCharacters.slice(offset, offset + sliceSize);<br><br>    <span class=\"hljs-keyword\">var</span> byteNumbers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(slice.length);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; slice.length; i++) &#123;<br>      byteNumbers[i] = slice.charCodeAt(i);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> byteArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(byteNumbers);<br><br>    byteArrays.push(byteArray);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> blob = <span class=\"hljs-keyword\">new</span> Blob(byteArrays, &#123;<span class=\"hljs-attr\">type</span>: contentType&#125;);<br>  <span class=\"hljs-keyword\">return</span> blob;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>结合第一段代码可以发现，window.atob(b64Data.split(‘,’)[1]), 要去掉url的头，而且代码看起来更健壮！</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"2016-04-20-20-17\"><a href=\"#2016-04-20-20-17\" class=\"headerlink\" title=\"2016-04-20 20:17\"></a>2016-04-20 20:17</h3><h4 id=\"修改canvas-toDataURL-默认的截图是96dpi-怎么调高dpi\"><a href=\"#修改canvas-toDataURL-默认的截图是96dpi-怎么调高dpi\" class=\"headerlink\" title=\"修改canvas.toDataURL() 默认的截图是96dpi 怎么调高dpi\"></a>修改canvas.toDataURL() 默认的截图是96dpi 怎么调高dpi</h4><ol>\n<li><a href=\"http://stackoverflow.com/questions/14488849/higher-dpi-graphics-with-html5-canvas\">Higher DPI graphics with HTML5 canvas</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\">HTMLCanvasElement.toDataURL()</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/canvas/hidpi/\">High DPI Canvas</a></li>\n</ol>\n<h3 id=\"2016-06-02-14-05-01\"><a href=\"#2016-06-02-14-05-01\" class=\"headerlink\" title=\"2016-06-02 14:05:01\"></a>2016-06-02 14:05:01</h3><ol>\n<li><a href=\"http://qiutc.me/post/uploading-image-file-in-mobile-fe.html\">移动端图片上传的实践</a> 总结的挺详细的</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ol>\n<li><a href=\"https://github.com/xiangpaopao/blog/issues/7\">移动端Web上传图片实践</a></li>\n<li><a href=\"http://blog.csdn.net/iefreer/article/details/40740465\">Canvas实例教程：图像移动、大小调整和裁剪</a></li>\n</ol>\n<h2 id=\"参考库\"><a href=\"#参考库\" class=\"headerlink\" title=\"参考库\"></a>参考库</h2><ol>\n<li><p><a href=\"https://github.com/gokercebeci/canvasResize\">canvasResize</a></p>\n</li>\n<li><p><a href=\"https://github.com/fengyuanchen/cropperjs\">cropperjs</a></p>\n<blockquote>\n<p>without jQuery, 很强大的，API很清楚</p>\n</blockquote>\n</li>\n</ol>\n","more":"<h3 id=\"2016-04-14-【文件格式的转换，Base64-amp-Blob-amp-File】\"><a href=\"#2016-04-14-【文件格式的转换，Base64-amp-Blob-amp-File】\" class=\"headerlink\" title=\"2016-04-14 【文件格式的转换，Base64 &amp; Blob &amp; File】\"></a>2016-04-14 【文件格式的转换，Base64 &amp; Blob &amp; File】</h3><ol>\n<li><a href=\"http://www.blogjava.net/jidebingfeng/articles/406171.html\">javascript将base64编码的图片数据转换为file并提交</a><blockquote>\n<p>测试chrome 浏览器，和iOS9.3 中可以（微信）【解决了canvas.toBlob()不支持问题】, 代码如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\">convertBase64UrlToBlob: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">urlData, type</span>)</span>&#123;<br>    contentType = type || <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>    <span class=\"hljs-keyword\">var</span> bytes=<span class=\"hljs-built_in\">window</span>.atob(urlData.split(<span class=\"hljs-string\">&#x27;,&#x27;</span>)[<span class=\"hljs-number\">1</span>]);        <span class=\"hljs-comment\">//去掉url的头，并转换为byte</span><br>    <span class=\"hljs-comment\">//处理异常,将ascii码小于0的转换为大于0</span><br>    <span class=\"hljs-keyword\">var</span> ab = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">ArrayBuffer</span>(bytes.length);<br>    <span class=\"hljs-keyword\">var</span> ia = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(ab);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; bytes.length; i++) &#123;<br>        ia[i] = bytes.charCodeAt(i);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Blob( [ab] , &#123;<span class=\"hljs-attr\">type</span> : contentType&#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><a href=\"http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\">Creating a Blob from a base64 string in JavaScript</a><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">b64toBlob</span>(<span class=\"hljs-params\">b64Data, contentType, sliceSize</span>) </span>&#123;<br>  contentType = contentType || <span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  sliceSize = sliceSize || <span class=\"hljs-number\">512</span>;<br><br>  <span class=\"hljs-keyword\">var</span> byteCharacters = atob(b64Data);<br>  <span class=\"hljs-keyword\">var</span> byteArrays = [];<br><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> offset = <span class=\"hljs-number\">0</span>; offset &lt; byteCharacters.length; offset += sliceSize) &#123;<br>    <span class=\"hljs-keyword\">var</span> slice = byteCharacters.slice(offset, offset + sliceSize);<br><br>    <span class=\"hljs-keyword\">var</span> byteNumbers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(slice.length);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; slice.length; i++) &#123;<br>      byteNumbers[i] = slice.charCodeAt(i);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> byteArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(byteNumbers);<br><br>    byteArrays.push(byteArray);<br>  &#125;<br><br>  <span class=\"hljs-keyword\">var</span> blob = <span class=\"hljs-keyword\">new</span> Blob(byteArrays, &#123;<span class=\"hljs-attr\">type</span>: contentType&#125;);<br>  <span class=\"hljs-keyword\">return</span> blob;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>结合第一段代码可以发现，window.atob(b64Data.split(‘,’)[1]), 要去掉url的头，而且代码看起来更健壮！</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"2016-04-20-20-17\"><a href=\"#2016-04-20-20-17\" class=\"headerlink\" title=\"2016-04-20 20:17\"></a>2016-04-20 20:17</h3><h4 id=\"修改canvas-toDataURL-默认的截图是96dpi-怎么调高dpi\"><a href=\"#修改canvas-toDataURL-默认的截图是96dpi-怎么调高dpi\" class=\"headerlink\" title=\"修改canvas.toDataURL() 默认的截图是96dpi 怎么调高dpi\"></a>修改canvas.toDataURL() 默认的截图是96dpi 怎么调高dpi</h4><ol>\n<li><a href=\"http://stackoverflow.com/questions/14488849/higher-dpi-graphics-with-html5-canvas\">Higher DPI graphics with HTML5 canvas</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\">HTMLCanvasElement.toDataURL()</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/canvas/hidpi/\">High DPI Canvas</a></li>\n</ol>\n<h3 id=\"2016-06-02-14-05-01\"><a href=\"#2016-06-02-14-05-01\" class=\"headerlink\" title=\"2016-06-02 14:05:01\"></a>2016-06-02 14:05:01</h3><ol>\n<li><a href=\"http://qiutc.me/post/uploading-image-file-in-mobile-fe.html\">移动端图片上传的实践</a> 总结的挺详细的</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ol>\n<li><a href=\"https://github.com/xiangpaopao/blog/issues/7\">移动端Web上传图片实践</a></li>\n<li><a href=\"http://blog.csdn.net/iefreer/article/details/40740465\">Canvas实例教程：图像移动、大小调整和裁剪</a></li>\n</ol>\n<h2 id=\"参考库\"><a href=\"#参考库\" class=\"headerlink\" title=\"参考库\"></a>参考库</h2><ol>\n<li><p><a href=\"https://github.com/gokercebeci/canvasResize\">canvasResize</a></p>\n</li>\n<li><p><a href=\"https://github.com/fengyuanchen/cropperjs\">cropperjs</a></p>\n<blockquote>\n<p>without jQuery, 很强大的，API很清楚</p>\n</blockquote>\n</li>\n</ol>","categories":[{"name":"F2E","path":"api/categories/F2E.json"}],"tags":[]}